from openai import OpenAI
from dotenv import load_dotenv
import os
import json

# Load environment variables from .env file
load_dotenv()

# Initialize the OpenAI client using your endpoint and token
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
)

def generate_luxury_tagline_from_json(product_description_image, product_attributes) -> str:
    """
    Accepts a JSON string (json_input) containing arbitrary product attributes.
    Iterates through all keys (including nested structures) and includes them in the GPT prompt.
    Returns a luxury-fashion-style tagline generated by GPT.
    """
    # try:
    #     # Parse the JSON input into a Python dictionary
    #     product_attributes = json.loads(json_input)
    # except json.JSONDecodeError as e:
    #     raise ValueError(f"Invalid JSON provided: {e}")

    # Begin constructing the prompt. 
    # We instruct GPT to use exactly the provided key‚Äìvalue pairs and not to hallucinate.
    prompt_lines = [
        "You are an expert luxury fashion editor writing an editorial tagline for a new limited-edition product by a well-known luxury brand.",
        "Use only the information given and do not invent or embellish any details.",
        "",
        "Here are all the product attributes provided:"
    ]

    # Dynamically iterate over every top-level key in the dictionary
    for key, value in product_attributes.items():
        # Convert value to a nicely formatted JSON string (properly handle nested lists/dicts)
        # We indent nested objects by two spaces for readability
        pretty_value = json.dumps(value, indent=2, ensure_ascii=False)
        # Prepend each line of the value with two spaces so it's clear it belongs under the key
        indented_value = "\n".join([f"  {line}" for line in pretty_value.splitlines()])
        # Append a line like "Key:" followed by the indented JSON value
        prompt_lines.append(f"- {key}:\n{indented_value}")

    # Add an instruction about tone and length
    prompt_lines.append("")
    prompt_lines.append("Requirements:")
    prompt_lines.append("- Weave in the brand‚Äôs heritage and craftsmanship legacy (if present).")
    prompt_lines.append("- Highlight any design inspiration, unique elements, or USPs provided.")
    prompt_lines.append("- Emphasize exclusivity and ethical sourcing (if those keys exist).")
    prompt_lines.append("- Use evocative, sensory language to appeal to discerning luxury buyers.")
    prompt_lines.append("- Maintain an aspirational, persuasive tone that encourages immediate consideration of purchase.")
    prompt_lines.append("- Keep the tagline under 100 words.")
    prompt_lines.append("\n ####")
    prompt_lines.append(" Below is the visual description of the image. Do take into account while framing the Tagline.")
    prompt_lines.append(f"{product_description_image}")
    
    # Join all lines into a single prompt string
    full_prompt = "\n".join(prompt_lines)

    # Call the OpenAI API with a low temperature to reduce hallucinations
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": "You are a world-class luxury fashion editor."},
            {"role": "user", "content": full_prompt}
        ],
        temperature=0.3,
        max_tokens=300
    )

    # Extract and return the generated tagline
    return response.choices[0].message.content.strip()


# if __name__ == "__main__":
#     # Your provided JSON, including nested "Reviews" and an empty "Review_Label_Counts"
#     example_json = """
#     {
#         "Style Number": [
#             "CY201"
#         ],
#         "Measurements": [
#             "Length: 7.75\\\"",
#             "Height: 4.25\\\"",
#             "Width: 2.75\\\""
#         ],
#         "Materials": [
#             "Polished pebble leather",
#             "Fabric lining"
#         ],
#         "Handle": [
#             "Detachable handle with 8.5\\\" drop"
#         ],
#         "Strap": [
#             "Detachable strap with 21.50\\\" drop for shoulder or crossbody wear"
#         ],
#         "Features": [
#             "Outside slip pocket",
#             "Inside zip and multifunction pockets",
#             "Snap closure"
#         ],
#         "Reviews": {
#             "overall_rating": "4.7Stars",
#             "number_of_reviews": "342Reviews",
#             "individual_reviews": [
#                 {
#                     "reviewer": "Hada C.",
#                     "date": "May  28, 2025",
#                     "rating": 5.0,
#                     "title": "Tabby 20",
#                     "description": "Love my Tabby! It‚Äôs not too big not too small just the right size.",
#                     "recommend": null,
#                     "thumbs_up": 0,
#                     "thumbs_down": 1
#                 },
#                 {
#                     "reviewer": "Samantha G.",
#                     "date": "May  28, 2025",
#                     "rating": 5.0,
#                     "title": "",
#                     "description": "My teenager loves this bag!",
#                     "recommend": null,
#                     "thumbs_up": 0,
#                     "thumbs_down": 0
#                 },
#                 {
#                     "reviewer": "Kayla J.",
#                     "date": "May  25, 2025",
#                     "rating": 5.0,
#                     "title": "Main character energy",
#                     "description": "I‚Äôve had my coach tabby bag for almost a year and I am still in love with it! It‚Äôs one of my most versatile bags. It adds a bit of class to any outfit. The quality of this bag is top-tier, and it easily elevates your wardrobe.",
#                     "recommend": null,
#                     "thumbs_up": 4,
#                     "thumbs_down": 1
#                 },
#                 {
#                     "reviewer": "Monica R.",
#                     "date": "May  24, 2025",
#                     "rating": 5.0,
#                     "title": "‚ù§Ô∏è my beautiful bag",
#                     "description": "Love love ‚ù§Ô∏è",
#                     "recommend": null,
#                     "thumbs_up": 1,
#                     "thumbs_down": 0
#                 },
#                 {
#                     "reviewer": "Tsunami",
#                     "date": "May  24, 2025",
#                     "rating": 5.0,
#                     "title": "I love my Bag üòç",
#                     "description": "One of my favorite purses to date. It has four functional compartments. I was able to hold a battery pack, AirPods, card holder, wire, lipstick, cuticle oil, and gum all at once. What more can a girl ask for?  I will be getting another one.",
#                     "recommend": null,
#                     "thumbs_up": 3,
#                     "thumbs_down": 1
#                 },
#                 {
#                     "reviewer": "Brooklyn B.",
#                     "date": "May  21, 2025",
#                     "rating": 5.0,
#                     "title": "Too small",
#                     "description": "Great bag great material. It‚Äôs just too small.",
#                     "recommend": null,
#                     "thumbs_up": 3,
#                     "thumbs_down": 10
#                 },
#                 {
#                     "reviewer": "Cat P.",
#                     "date": "May  20, 2025",
#                     "rating": 5.0,
#                     "title": "LOVE IT",
#                     "description": "I love this purse so much and it matches with everything that I wear.",
#                     "recommend": null,
#                     "thumbs_up": 1,
#                     "thumbs_down": 0
#                 }
#             ]
#         },
#         "Review_Label_Counts": {}
#     }
#     """

#     # Generate and print the tagline
#     tagline = generate_luxury_tagline_from_json(example_json)
#     print("Generated Tagline:", tagline)
